// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.FacadeAPI = (function() {
  function FacadeAPI(socketAdress, callback) {
    this.onUsers = bind(this.onUsers, this);
    this.onJoin = bind(this.onJoin, this);
    this.onAuthorize = bind(this.onAuthorize, this);
    this.socket = new WebSocket(socketAdress);
    this.nickname = this.getCookie('nickname');
    this.token = this.getCookie('token');
    this.rooms = [];
    if (this.isAuthorize == null) {
      this.isAuthorize = this.token;
    }
    this.types = [
      {
        type: 'auth_success',
        callbacks: [this.onAuthorize]
      }, {
        type: 'message',
        callbacks: []
      }, {
        type: 'users',
        callbacks: [this.onUsers]
      }, {
        type: 'rooms',
        callbacks: []
      }, {
        type: 'join',
        callbacks: [this.onJoin]
      }, {
        type: 'user_leave',
        callbacks: []
      }, {
        type: 'user_join',
        callbacks: []
      }, {
        type: 'error',
        callbacks: []
      }
    ];
    this.socket.onerror = (function(_this) {
      return function(e) {
        return _this.log(e.type);
      };
    })(this);
    this.socket.onclose = (function(_this) {
      return function(e) {
        return _this.log(e.reason);
      };
    })(this);
    this.socket.onopen = (function(_this) {
      return function() {
        return callback();
      };
    })(this);
    this.socket.onmessage = (function(_this) {
      return function(msg) {
        var data, func, i, j, len, len1, ref, ref1, route;
        data = JSON.parse(msg.data);
        ref = _this.types;
        for (i = 0, len = ref.length; i < len; i++) {
          route = ref[i];
          if (route.type === data.type) {
            ref1 = route.callbacks;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              func = ref1[j];
              func(data.data);
            }
          }
        }
      };
    })(this);
  }

  FacadeAPI.prototype.sendCommand = function(type, data) {
    return this.socket.send(JSON.stringify({
      type: type,
      data: data
    }));
  };

  FacadeAPI.prototype.authorize = function(login, password) {
    return this.sendCommand('auth', {
      login: login,
      password: password
    });
  };

  FacadeAPI.prototype.logout = function() {
    this.token = null;
    this.nickname = null;
    return this.isAuthorize = false;
  };

  FacadeAPI.prototype.join = function(roomID) {
    return this.sendCommand('join', {
      room_id: roomID,
      token: this.token
    });
  };

  FacadeAPI.prototype.getRooms = function(start, end) {
    return this.sendCommand('get_rooms', {
      start: start || 0,
      end: end || 0
    });
  };

  FacadeAPI.prototype.exit = function(roomID) {
    return this.sendCommand('exit', {
      room_id: roomID
    });
  };

  FacadeAPI.prototype.message = function(roomID, message) {
    if (this.isAuthorize) {
      return this.sendCommand('message', {
        room_id: roomID,
        token: this.token,
        message: message
      });
    }
  };

  FacadeAPI.prototype.exit = function(roomID) {
    return rooms.map(function(item) {
      if (item.id === roomID) {
        return sendCommand('exit', {
          room_id: roomID,
          token: this.token
        });
      }
    });
  };

  FacadeAPI.prototype.request = function(roomID) {
    if (this.isAuthorize) {
      return this.sendCommand('request', {
        room_id: roomID,
        token: this.token
      });
    }
  };

  FacadeAPI.prototype.getRequests = function() {
    if (this.isAuthorize) {
      return this.sendCommand('get_requests', {
        token: this.token
      });
    }
  };

  FacadeAPI.prototype.invite = function(roomID, user) {
    if (this.isAuthorize) {
      return this.sendCommand('invite', {
        room_id: roomID,
        token: this.token,
        user: user
      });
    }
  };

  FacadeAPI.prototype.confirm = function(request) {
    if (this.isAuthorize) {
      return this.sendCommand('confirm', {
        request: request,
        token: this.token
      });
    }
  };

  FacadeAPI.prototype.getUsers = function(roomID) {
    return this.sendCommand('get_users', {
      room_id: roomID
    });
  };

  FacadeAPI.prototype.onAuthorize = function(data) {
    this.nickname = data.nickname;
    this.token = data.token;
    this.isAuthorize = true;
    document.cookie['token'] = data.token;
    return document.cookie['nickname'] = data.nickname;
  };

  FacadeAPI.prototype.onJoin = function(data) {
    return this.rooms.push(data);
  };

  FacadeAPI.prototype.onUsers = function(data) {
    return this.rooms.map(function(item) {
      if (item.id === data.id) {
        return item.users = data.users;
      }
    });
  };

  FacadeAPI.prototype.addListener = function(type, callback) {
    var i, len, ref, route;
    ref = this.types;
    for (i = 0, len = ref.length; i < len; i++) {
      route = ref[i];
      if (route.type === type) {
        route.callbacks.push(callback);
      }
    }
  };

  FacadeAPI.prototype.getCookie = function(name) {
    var matches;
    matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
    if (matches) {
      return decodeURIComponent(matches[1]);
    } else {
      return void 0;
    }
  };

  FacadeAPI.prototype.log = function(msg) {
    return console.log("API facade - " + ((new Date()).toTimeString()) + ": " + msg);
  };

  return FacadeAPI;

})();
