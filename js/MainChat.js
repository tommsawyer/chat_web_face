// Generated by CoffeeScript 1.9.3
var ChatTabs, ChatUsers, ChatWindow, MainChat;

ChatUsers = React.createClass({
  componentWillMount: function() {
    if (this.props.room != null) {
      return API.getUsers(this.props.room);
    }
  },
  getInitialState: function() {
    API.addListener('users', (function(_this) {
      return function(data) {
        return _this.setState({
          users: data.users
        });
      };
    })(this));
    API.addListener('join', function(data) {
      return API.getUsers(data.id);
    });
    return {
      users: []
    };
  },
  render: function() {
    return React.createElement("div", {
      "className": 'users span1'
    }, React.createElement("ul", {
      "className": 'nav nav-pills nav-stacked'
    }, this.state.users.map(function(item) {
      return React.createElement("li", null, " ", item.nickname, " ");
    })));
  }
});

ChatWindow = React.createClass({
  getRoom: function() {
    return this.props.room;
  },
  getInitialState: function() {
    return {
      messages: []
    };
  },
  componentDidMount: function() {
    var tarea;
    API.addListener('message', (function(_this) {
      return function(data) {
        var msg;
        msg = _this.state.messages;
        msg.push(data);
        return _this.setState({
          messages: msg
        });
      };
    })(this));
    tarea = document.getElementById('msgtext');
    return tarea.onkeydown = (function(_this) {
      return function(e) {
        if (e.keyCode === 13) {
          API.message(_this.getRoom(), tarea.value);
          tarea.value = '';
          return e.preventDefault();
        }
      };
    })(this);
  },
  render: function() {
    return React.createElement("div", {
      "className": 'chat span10'
    }, this.state.messages.map((function(_this) {
      return function(item, i) {
        return React.createElement("span", null, React.createElement("span", {
          "className": 'user-info'
        }, " ", item.nickname, " "), " : ", item.message, "  ", React.createElement("br", null));
      };
    })(this)), React.createElement("textarea", {
      "id": 'msgtext',
      "className": "span10",
      "placeholder": "Ваше сообщение"
    }));
  }
});

ChatTabs = React.createClass({
  isActive: function(num) {
    if (this.props.active === num) {
      return 'active';
    }
    return '';
  },
  render: function() {
    return React.createElement("ul", {
      "className": "nav nav-tabs"
    }, this.props.rooms.map((function(_this) {
      return function(item, i) {
        return React.createElement("li", {
          "className": _this.isActive(i + 1),
          "data-roomid": item.id
        }, React.createElement("a", {
          "href": ""
        }, React.createElement("b", null, item.name), React.createElement("button", {
          "className": "close"
        }, "\u00d7")));
      };
    })(this)));
  }
});

MainChat = React.createClass({
  getActiveRoom: function() {
    return API.rooms[this.state.active - 1];
  },
  componentWillMount: function() {
    API.addListener('join', (function(_this) {
      return function(data) {
        return _this.setState({
          rooms: API.rooms
        });
      };
    })(this));
    return API.addListener('message', (function(_this) {
      return function(data) {
        var ind, j, len, msg, ref, room;
        msg = _this.state.messages;
        ref = API.rooms;
        for (ind = j = 0, len = ref.length; j < len; ind = ++j) {
          room = ref[ind];
          if (data.room_id === room.id) {
            msg[ind].push(data);
          }
        }
        return _this.setState({
          messages: msg
        });
      };
    })(this));
  },
  getInitialState: function() {
    return {
      active: 1,
      rooms: API.rooms,
      users: [],
      messages: [[]]
    };
  },
  render: function() {
    return React.createElement("div", {
      "className": 'tabbable'
    }, React.createElement("div", {
      "className": "tab-content"
    }, React.createElement(ChatTabs, {
      "active": this.state.active,
      "rooms": this.state.rooms
    }), React.createElement(ChatWindow, {
      "messages": this.state.messages[this.state.active - 1],
      "room": (API.rooms[this.state.active - 1] != null ? API.rooms[this.state.active - 1].id : void 0)
    }), React.createElement(ChatUsers, {
      "room": (API.rooms[this.state.active - 1] != null ? API.rooms[this.state.active - 1].id : void 0)
    })));
  }
});
